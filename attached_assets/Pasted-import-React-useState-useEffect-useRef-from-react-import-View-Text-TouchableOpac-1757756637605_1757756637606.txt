import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Dimensions,
  SafeAreaView,
  StatusBar,
  Vibration,
} from 'react-native';
import Voice from '@react-native-voice/voice';
import Tts from 'react-native-tts';

const { width, height } = Dimensions.get('window');

const FarmerVoiceScreen = () => {
  const [isListening, setIsListening] = useState(false);
  const [recognizedText, setRecognizedText] = useState('');
  const [currentLanguage, setCurrentLanguage] = useState('hi-IN');
  const [isFirstLaunch, setIsFirstLaunch] = useState(true);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [currentMenu, setCurrentMenu] = useState('main');
  const [repeatCount, setRepeatCount] = useState(0);
  const instructionTimer = useRef(null);

  // Enhanced messages for low-literate users with simpler language
  const messages = {
    greeting: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рд╕реБрдиреВрдВрдЧрд╛ред рдмрдбрд╝реЗ рд╣рд░реЗ рдмрдЯрди рдХреЛ рджрдмрд╛рдХрд░ рдмреЛрд▓реЗрдВред",
    mainMenu: "рдЖрдк рдХрд╣ рд╕рдХрддреЗ рд╣реИрдВ - рдореМрд╕рдо, рдХреАрдордд, рдпрд╛ рдорджрджред рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рд╣рд░рд╛ рдмрдЯрди рджрдмрд╛рдПрдВред",
    weather: "рдЖрдЬ рдзреВрдк рд╣реИред рддрд╛рдкрдорд╛рди 28 рдбрд┐рдЧреНрд░реА рд╣реИред рдмрд╛рд░рд┐рд╢ рдирд╣реАрдВ рд╣реЛрдЧреАред рдЦреЗрдд рдХрд╛ рдХрд╛рдо рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред",
    prices: "рдЧреЗрд╣реВрдВ 2000 рд░реБрдкрдпреЗ рдХреНрд╡рд┐рдВрдЯрд▓ред рдЪрд╛рд╡рд▓ 1800 рд░реБрдкрдпреЗ рдХреНрд╡рд┐рдВрдЯрд▓ред рдкреНрдпрд╛рдЬрд╝ 30 рд░реБрдкрдпреЗ рдХрд┐рд▓реЛред",
    help: "рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░реВрдВрдЧрд╛ред рд╣рд░рд╛ рдмрдЯрди рджрдмрд╛рдПрдВ рдФрд░ рдмреЛрд▓реЗрдВ - рдореМрд╕рдо, рдХреАрдордд, рдпрд╛ рдорджрджред",
    listening: "рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ... рдмреЛрд▓рд┐рдП",
    notUnderstood: "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдлрд┐рд░ рд╕реЗ рдмреЛрд▓реЗрдВред рд╣рд░рд╛ рдмрдЯрди рджрдмрд╛рдПрдВред",
    error: "рдХреЛрдИ рд╕рдорд╕реНрдпрд╛ рд╣реИред рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред рд╣рд░рд╛ рдмрдЯрди рджрдмрд╛рдПрдВред",
    buttonPress: "рдмрдЯрди рджрдмрд╛рдпрд╛ рдЧрдпрд╛",
    menuRepeat: "рдореИрдВ рдлрд┐рд░ рд╕реЗ рдмрддрд╛рддрд╛ рд╣реВрдВ",
    goodbye: "рдзрдиреНрдпрд╡рд╛рдж! рдлрд┐рд░ рдорд┐рд▓реЗрдВрдЧреЗред",
    slowDown: "рдореИрдВ рдзреАрд░реЗ рдмреЛрд▓реВрдВрдЧрд╛",
    confirmation: "рдареАрдХ рд╣реИ, рд╕рдордЭ рдЧрдпрд╛",
  };

  // Simple voice commands for low-literate users
  const simpleCommands = {
    weather: ['рдореМрд╕рдо', 'weather', 'рдмрд╛рд░рд┐рд╢', 'рдзреВрдк', 'рдардВрдб'],
    prices: ['рдХреАрдордд', 'рднрд╛рд╡', 'price', 'рджрд╛рдо', 'рд░реЗрдЯ'],
    help: ['рдорджрдж', 'help', 'рд╕рд╣рд╛рдпрддрд╛', 'рдмрддрд╛рдУ'],
    repeat: ['рдлрд┐рд░', 'рджреЛрдмрд╛рд░рд╛', 'repeat', 'again'],
    slow: ['рдзреАрд░реЗ', 'slow', 'рдЖрд░рд╛рдо'],
    bye: ['рдмрд╛рдп', 'bye', 'рдЬрд╛рдирд╛', 'рдмрдВрдж'],
  };

  useEffect(() => {
    // Configure TTS for low-literate users
    Tts.setDefaultLanguage(currentLanguage);
    Tts.setDefaultRate(0.4); // Very slow speech
    Tts.setDefaultPitch(0.9); // Slightly lower pitch for clarity
    
    // Voice recognition setup
    Voice.onSpeechStart = onSpeechStart;
    Voice.onSpeechRecognized = onSpeechRecognized;
    Voice.onSpeechEnd = onSpeechEnd;
    Voice.onSpeechError = onSpeechError;
    Voice.onSpeechResults = onSpeechResults;

    // TTS event listeners
    Tts.addEventListener('tts-start', () => setIsSpeaking(true));
    Tts.addEventListener('tts-finish', () => {
      setIsSpeaking(false);
      // Auto-repeat instructions after 10 seconds of inactivity
      if (repeatCount < 2) {
        instructionTimer.current = setTimeout(() => {
          speakText(messages.mainMenu);
          setRepeatCount(prev => prev + 1);
        }, 10000);
      }
    });
    Tts.addEventListener('tts-cancel', () => setIsSpeaking(false));

    // Welcome sequence for first-time users
    if (isFirstLaunch) {
      setTimeout(() => {
        speakText(messages.greeting);
        setTimeout(() => {
          speakText(messages.mainMenu);
        }, 4000);
        setIsFirstLaunch(false);
      }, 1500);
    }

    return () => {
      Voice.destroy().then(Voice.removeAllListeners);
      Tts.removeAllListeners('tts-start');
      Tts.removeAllListeners('tts-finish');
      Tts.removeAllListeners('tts-cancel');
      if (instructionTimer.current) {
        clearTimeout(instructionTimer.current);
      }
    };
  }, [currentLanguage, repeatCount]);

  const onSpeechStart = () => {
    setIsListening(true);
    setRecognizedText('ЁЯОЩ рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...');
    Vibration.vibrate(100); // Haptic feedback
    if (instructionTimer.current) {
      clearTimeout(instructionTimer.current);
    }
  };

  const onSpeechRecognized = () => {
    // Provide audio feedback that speech was recognized
    Vibration.vibrate([50, 50, 50]);
  };

  const onSpeechEnd = () => {
    setIsListening(false);
    setRecognizedText('тЬЕ рд╕реБрди рд▓рд┐рдпрд╛');
  };

  const onSpeechError = (error) => {
    console.log('Speech Error:', error);
    setIsListening(false);
    setRecognizedText('тЭМ рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ');
    Vibration.vibrate(200);
    setTimeout(() => {
      speakText(messages.error);
    }, 500);
  };

  const onSpeechResults = (event) => {
    const spokenText = event.value[0].toLowerCase();
    setRecognizedText(тЬЕ "${event.value[0]}");
    setRepeatCount(0); // Reset repeat counter on successful recognition
    
    // Process with confirmation
    setTimeout(() => {
      speakText(messages.confirmation);
      setTimeout(() => {
        processVoiceCommand(spokenText);
      }, 1500);
    }, 500);
  };

  const processVoiceCommand = (command) => {
    let commandFound = false;

    // Check each command category
    for (const [category, keywords] of Object.entries(simpleCommands)) {
      if (keywords.some(keyword => command.includes(keyword))) {
        commandFound = true;
        handleCommand(category);
        break;
      }
    }

    if (!commandFound) {
      speakText(${messages.notUnderstood} ${messages.mainMenu});
    }
  };

  const handleCommand = (command) => {
    switch (command) {
      case 'weather':
        speakText(messages.weather);
        break;
      case 'prices':
        speakText(messages.prices);
        break;
      case 'help':
        speakText(${messages.help} ${messages.mainMenu});
        break;
      case 'repeat':
        speakText(${messages.menuRepeat}. ${messages.mainMenu});
        break;
      case 'slow':
        Tts.setDefaultRate(0.3);
        speakText(${messages.slowDown}. ${messages.mainMenu});
        break;
      case 'bye':
        speakText(messages.goodbye);
        break;
      default:
        speakText(messages.mainMenu);
    }
  };

  const speakText = (text) => {
    if (isSpeaking) {
      Tts.stop();
    }
    Tts.speak(text);
  };

  const startListening = async () => {
    try {
      setRecognizedText('');
      await Voice.start(currentLanguage);
      // Audio confirmation
      setTimeout(() => {
        if (isListening) {
          speakText(messages.listening);
        }
      }, 1000);
    } catch (error) {
      console.log('Start Listening Error:', error);
      speakText(messages.error);
    }
  };

  const stopListening = async () => {
    try {
      await Voice.stop();
      setIsListening(false);
    } catch (error) {
      console.log('Stop Listening Error:', error);
    }
  };

  const handleMicPress = () => {
    Vibration.vibrate(50);
    speakText(messages.buttonPress);
    setTimeout(() => {
      if (isListening) {
        stopListening();
      } else {
        startListening();
      }
    }, 800);
  };

  const handleRepeatPress = () => {
    Vibration.vibrate(50);
    speakText(messages.menuRepeat);
    setTimeout(() => {
      speakText(messages.mainMenu);
    }, 1500);
  };

  return (
    <SafeAreaView style={styles.container}>
      <StatusBar backgroundColor="#4CAF50" barStyle="light-content" />
      
      {/* Simplified Header with large text */}
      <View style={styles.header}>
        <Text style={styles.headerText}>ЁЯМ╛ рдХрд┐рд╕рд╛рди рдорд┐рддреНрд░</Text>
        <Text style={styles.subHeaderText}>рдЖрд╡рд╛рдЬрд╝ рд╕реЗ рдмрд╛рдд рдХрд░реЗрдВ</Text>
      </View>

      {/* Main Content */}
      <View style={styles.content}>
        {/* Large Status Display */}
        <View style={styles.statusContainer}>
          <Text style={styles.statusIcon}>
            {isListening ? 'ЁЯОЩ' : isSpeaking ? 'ЁЯФК' : 'ЁЯСВ'}
          </Text>
          <Text style={styles.statusText}>
            {isListening ? 'рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...' : 
             isSpeaking ? 'рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдВ...' : 
             'рддреИрдпрд╛рд░ рд╣реВрдВ'}
          </Text>
          {recognizedText ? (
            <Text style={styles.recognizedText}>{recognizedText}</Text>
          ) : null}
        </View>

        {/* Large Action Buttons */}
        <View style={styles.buttonContainer}>
          {/* Main Mic Button - Extra Large */}
          <TouchableOpacity
            style={[styles.mainButton, isListening && styles.mainButtonActive]}
            onPress={handleMicPress}
            disabled={isSpeaking}
          >
            <Text style={styles.mainButtonIcon}>
              {isListening ? 'ЁЯФ┤' : 'ЁЯОЩ'}
            </Text>
            <Text style={styles.mainButtonText}>
              {isListening ? 'рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ' : 'рдпрд╣рд╛рдБ рджрдмрд╛рдПрдВ'}
            </Text>
            <Text style={styles.mainButtonSubtext}>
              {isListening ? 'рдЕрдм рдмреЛрд▓реЗрдВ' : 'рдмреЛрд▓рдиреЗ рдХреЗ рд▓рд┐рдП'}
            </Text>
          </TouchableOpacity>

          {/* Repeat Button */}
          <TouchableOpacity
            style={styles.repeatButton}
            onPress={handleRepeatPress}
            disabled={isSpeaking}
          >
            <Text style={styles.repeatIcon}>ЁЯФД</Text>
            <Text style={styles.repeatButtonText}>рджреЛрдмрд╛рд░рд╛ рд╕реБрдиреЗрдВ</Text>
          </TouchableOpacity>
        </View>

        {/* Simple Visual Instructions */}
        <View style={styles.instructionsContainer}>
          <Text style={styles.instructionsTitle}>рдмреЛрд▓ рд╕рдХрддреЗ рд╣реИрдВ:</Text>
          <View style={styles.instructionRow}>
            <Text style={styles.instructionEmoji}>ЁЯМд</Text>
            <Text style={styles.instructionText}>"рдореМрд╕рдо"</Text>
          </View>
          <View style={styles.instructionRow}>
            <Text style={styles.instructionEmoji}>ЁЯТ░</Text>
            <Text style={styles.instructionText}>"рдХреАрдордд"</Text>
          </View>
          <View style={styles.instructionRow}>
            <Text style={styles.instructionEmoji}>тЭУ</Text>
            <Text style={styles.instructionText}>"рдорджрдж"</Text>
          </View>
        </View>
      </View>

      {/* Footer with current status */}
      <View style={styles.footer}>
        <Text style={styles.footerText}>
          {isSpeaking ? 'ЁЯФК рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдВ...' : 
           isListening ? 'ЁЯСВ рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...' : 
           'тЬЕ рддреИрдпрд╛рд░ рд╣реВрдВ - рдмрдЯрди рджрдмрд╛рдПрдВ'}
        </Text>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F1F8E9',
  },
  header: {
    backgroundColor: '#4CAF50',
    paddingVertical: 25,
    paddingHorizontal: 20,
    alignItems: 'center',
    elevation: 4,
  },
  headerText: {
    fontSize: 28,
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
  },
  subHeaderText: {
    fontSize: 16,
    color: '#E8F5E8',
    marginTop: 5,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingVertical: 20,
  },
  statusContainer: {
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 30,
    marginBottom: 25,
    alignItems: 'center',
    elevation: 3,
    minHeight: 140,
    justifyContent: 'center',
  },
  statusIcon: {
    fontSize: 48,
    marginBottom: 10,
  },
  statusText: {
    fontSize: 22,
    color: '#2E7D32',
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 10,
  },
  recognizedText: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  buttonContainer: {
    marginBottom: 25,
  },
  mainButton: {
    backgroundColor: '#4CAF50',
    borderRadius: 25,
    padding: 30,
    alignItems: 'center',
    marginBottom: 20,
    elevation: 5,
    minHeight: 160,
    justifyContent: 'center',
  },
  mainButtonActive: {
    backgroundColor: '#FF5722',
  },
  mainButtonIcon: {
    fontSize: 48,
    marginBottom: 10,
  },
  mainButtonText: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    marginBottom: 5,
  },
  mainButtonSubtext: {
    color: '#E8F5E8',
    fontSize: 16,
    textAlign: 'center',
  },
  repeatButton: {
    backgroundColor: '#2196F3',
    borderRadius: 20,
    padding: 20,
    alignItems: 'center',
    elevation: 3,
  },
  repeatIcon: {
    fontSize: 32,
    marginBottom: 8,
  },
  repeatButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  instructionsContainer: {
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 25,
    elevation: 2,
  },
  instructionsTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#2E7D32',
    marginBottom: 20,
    textAlign: 'center',
  },
  instructionRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 15,
    paddingHorizontal: 10,
  },
  instructionEmoji: {
    fontSize: 28,
    marginRight: 20,
    width: 40,
  },
  instructionText: {
    fontSize: 20,
    color: '#4CAF50',
    fontWeight: '600',
  },
  footer: {
    backgroundColor: '#E8F5E8',
    paddingVertical: 20,
    alignItems: 'center',
    borderTopWidth: 2,
    borderTopColor: '#C8E6C9',
  },
  footerText: {
    fontSize: 18,
    color: '#2E7D32',
    fontWeight: '600',
    textAlign: 'center',
  },
});

export default FarmerVoiceScreen;